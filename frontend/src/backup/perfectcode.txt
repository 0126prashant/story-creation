--------------------------in's out logiv======================

import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import '../styles/landing.css';

const API_URL = 'http://localhost:8080/api/generate';

const Spinner3D = () => (
  <div className="spinner-3d">
    <div className="cube1"></div>
    <div className="cube2"></div>
  </div>
);

const LandingPage = () => {
  const [showQueryInput, setShowQueryInput] = useState(false);
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedImage, setGeneratedImage] = useState(null);
  const [gptResponse, setGptResponse] = useState('');
  const [status, setStatus] = useState('');
  const [audioData, setAudioData] = useState('');
  const [audioUrl, setAudioUrl] = useState('');
  const [narrationChunks, setNarrationChunks] = useState([]);
  const [displayedWords, setDisplayedWords] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [hasResponse, setHasResponse] = useState(false);
  const [audioEnded, setAudioEnded] = useState(false);
  const [showInputArea, setShowInputArea] = useState(true);
  const audioRef = useRef(null);

  const MAX_WORDS_DISPLAYED = 15;

  useEffect(() => {
    if (audioData) {
      const audioBlob = new Blob([Uint8Array.from(atob(audioData), c => c.charCodeAt(0))], { type: 'audio/mpeg' });
      const audioUrl = URL.createObjectURL(audioBlob);
      setAudioUrl(audioUrl);
    }
  }, [audioData]);

  useEffect(() => {
    if (audioRef.current) {
      const updateNarration = () => {
        if (!audioRef.current || narrationChunks.length === 0 || audioEnded) return;
        
        const currentTime = audioRef.current.currentTime;
        const totalDuration = audioRef.current.duration;
        const allWords = narrationChunks.flat().join(' ').split(' ');
        const wordIndex = Math.floor((currentTime / totalDuration) * allWords.length);
        
        setDisplayedWords(allWords.slice(Math.max(0, wordIndex - MAX_WORDS_DISPLAYED + 1), wordIndex + 1));
      };

      audioRef.current.ontimeupdate = updateNarration;
      audioRef.current.onplay = () => {
        setIsPlaying(true);
        setAudioEnded(false);
        setShowInputArea(false); // Hide input area when audio starts playing
      };
      audioRef.current.onpause = () => setIsPlaying(false);
      audioRef.current.onended = () => {
        setIsPlaying(false);
        setAudioEnded(true);
        setDisplayedWords([]); // Clear displayed words when audio ends
        setShowInputArea(true); // Show input area when audio ends
      };
    }

    return () => {
      if (audioRef.current) {
        audioRef.current.ontimeupdate = null;
        audioRef.current.onplay = null;
        audioRef.current.onpause = null;
        audioRef.current.onended = null;
      }
    };
  }, [audioUrl, narrationChunks, audioEnded]);

  useEffect(() => {
    if (audioUrl) {
      audioRef.current.play().catch(error => console.error("Audio playback failed:", error));
    }
  }, [audioUrl]);

  const handleBeginJourney = () => {
    setShowQueryInput(true);
  };

  const handleSendQuery = async () => {
    if (!query.trim()) return;

    setIsLoading(true);
    setGeneratedImage(null);
    setGptResponse('');
    setStatus('');
    setAudioData('');
    setAudioUrl('');
    setNarrationChunks([]);
    setDisplayedWords([]);
    setHasResponse(false);
    setAudioEnded(false);
    setShowInputArea(true);

    try {
      const response = await axios.post(API_URL, { prompt: query }, {
        responseType: 'text',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const lines = response.data.split('\n\n');
      for (let line of lines) {
        if (line.startsWith('data: ')) {
          const data = JSON.parse(line.slice(6));
          console.log('Received data:', data);
          switch (data.type) {
            case 'gpt':
              setGptResponse(data.content);
              setHasResponse(true);
              break;
            case 'status':
              setStatus(data.content);
              break;
            case 'image':
              setGeneratedImage(data.content);
              setStatus('');
              setHasResponse(true);
              break;
            case 'audio':
              setAudioData(data.content);
              setHasResponse(true);
              break;
            case 'narration':
              setNarrationChunks(prev => [...prev, data.content]);
              setHasResponse(true);
              break;
            case 'complete':
              setIsLoading(false);
              break;
            case 'error':
              setStatus('Error: ' + data.content);
              setIsLoading(false);
              break;
            default:
              break;
          }
        }
      }
    } catch (error) {
      console.error('Error:', error);
      setStatus('Connection error. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className="landing-page">
      <div className="background">
        <iframe
          src="https://giphy.com/embed/7LlTPKOMCov3lLFW2B"
          width="100%"
          height="100%"
          frameBorder="0"
          className="giphy-embed"
          allowFullScreen
        ></iframe>
      </div>

      <audio ref={audioRef} src={audioUrl} className="hidden"></audio>

      <div className="content">
        <h1 className="title">AI Journey Generator</h1>
        
        {!showQueryInput ? (
          <button onClick={handleBeginJourney} className="start-button">
            Begin Your Journey
          </button>
        ) : (
          <div className={`query-container ${hasResponse ? 'with-response' : ''}`}>
            {isLoading && !generatedImage && (
              <div className="spinner-wrapper">
                <Spinner3D />
              </div>
            )}
            {status && (
              <div className="status-message">
                <p>{status}</p>
              </div>
            )}
            <div className={`image-container ${hasResponse ? 'with-response' : ''}`}>
              {generatedImage && (
                <div className="image-wrapper">
                  <img 
                    src={generatedImage} 
                    alt="Generated" 
                    className="generated-image"
                  />
                </div>
              )}
              {displayedWords.length > 0 && !audioEnded && (
                <div className="narration-overlay">
                  <p className="single-line-narration">{displayedWords.join(' ')}</p>
                </div>
              )}
            </div>
            {showInputArea && (
              <div className="input-area">
                <input
                  type="text"
                  placeholder="Describe your journey..."
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                  className="query-input"
                />
                <button
                  onClick={handleSendQuery}
                  disabled={isLoading}
                  className={`generate-button ${isLoading ? 'disabled' : ''}`}
                >
                  Generate
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default LandingPage;















import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import '../styles/landing.css';

const API_URL = 'http://localhost:8080/api/generate';

const Spinner3D = () => (
  <div className="spinner-3d">
    <div className="cube1"></div>
    <div className="cube2"></div>
  </div>
);

const LandingPage = () => {
  const [showQueryInput, setShowQueryInput] = useState(false);
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedImage, setGeneratedImage] = useState(null);
  const [gptResponse, setGptResponse] = useState('');
  const [status, setStatus] = useState('');
  const [audioData, setAudioData] = useState('');
  const [audioUrl, setAudioUrl] = useState('');
  const [narrationChunks, setNarrationChunks] = useState([]);
  const [displayedWords, setDisplayedWords] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [hasResponse, setHasResponse] = useState(false);
  const audioRef = useRef(null);

  const MAX_WORDS_DISPLAYED = 15;

  useEffect(() => {
    if (audioData) {
      const audioBlob = new Blob([Uint8Array.from(atob(audioData), c => c.charCodeAt(0))], { type: 'audio/mpeg' });
      const audioUrl = URL.createObjectURL(audioBlob);
      setAudioUrl(audioUrl);
    }
  }, [audioData]);

  useEffect(() => {
    if (audioRef.current) {
      const updateNarration = () => {
        if (!audioRef.current || narrationChunks.length === 0) return;
        
        const currentTime = audioRef.current.currentTime;
        const totalDuration = audioRef.current.duration;
        const allWords = narrationChunks.flat().join(' ').split(' ');
        const wordIndex = Math.floor((currentTime / totalDuration) * allWords.length);
        
        setDisplayedWords(allWords.slice(Math.max(0, wordIndex - MAX_WORDS_DISPLAYED + 1), wordIndex + 1));
      };

      audioRef.current.ontimeupdate = updateNarration;
      audioRef.current.onplay = () => setIsPlaying(true);
      audioRef.current.onpause = () => setIsPlaying(false);
      audioRef.current.onended = () => {
        setIsPlaying(false);
        setDisplayedWords(narrationChunks.flat().join(' ').split(' ').slice(-MAX_WORDS_DISPLAYED));
      };
    }

    return () => {
      if (audioRef.current) {
        audioRef.current.ontimeupdate = null;
        audioRef.current.onplay = null;
        audioRef.current.onpause = null;
        audioRef.current.onended = null;
      }
    };
  }, [audioUrl, narrationChunks]);

  useEffect(() => {
    if (audioUrl) {
      audioRef.current.play().catch(error => console.error("Audio playback failed:", error));
    }
  }, [audioUrl]);

  const handleBeginJourney = () => {
    setShowQueryInput(true);
  };

  const handleSendQuery = async () => {
    if (!query.trim()) return;

    setIsLoading(true);
    setGeneratedImage(null);
    setGptResponse('');
    setStatus('');
    setAudioData('');
    setAudioUrl('');
    setNarrationChunks([]);
    setDisplayedWords([]);
    setHasResponse(false);

    try {
      const response = await axios.post(API_URL, { prompt: query }, {
        responseType: 'text',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const lines = response.data.split('\n\n');
      for (let line of lines) {
        if (line.startsWith('data: ')) {
          const data = JSON.parse(line.slice(6));
          console.log('Received data:', data);
          switch (data.type) {
            case 'gpt':
              setGptResponse(data.content);
              setHasResponse(true);
              break;
            case 'status':
              setStatus(data.content);
              break;
            case 'image':
              setGeneratedImage(data.content);
              setStatus('');
              setHasResponse(true);
              break;
            case 'audio':
              setAudioData(data.content);
              setHasResponse(true);
              break;
            case 'narration':
              setNarrationChunks(prev => [...prev, data.content]);
              setHasResponse(true);
              break;
            case 'complete':
              setIsLoading(false);
              break;
            case 'error':
              setStatus('Error: ' + data.content);
              setIsLoading(false);
              break;
            default:
              break;
          }
        }
      }
    } catch (error) {
      console.error('Error:', error);
      setStatus('Connection error. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className="landing-page">
      <div className="background">
        <iframe
          src="https://giphy.com/embed/7LlTPKOMCov3lLFW2B"
          width="100%"
          height="100%"
          frameBorder="0"
          className="giphy-embed"
          allowFullScreen
        ></iframe>
      </div>

      <audio ref={audioRef} src={audioUrl} className="hidden"></audio>

      <div className="content">
        <h1 className="title">AI Journey Generator</h1>
        
        {!showQueryInput ? (
          <button onClick={handleBeginJourney} className="start-button">
            Begin Your Journey
          </button>
        ) : (
          <div className={`query-container ${hasResponse ? 'with-response' : ''}`}>
            {isLoading && !generatedImage && (
              <div className="spinner-wrapper">
                <Spinner3D />
              </div>
            )}
            {status && (
              <div className="status-message">
                <p>{status}</p>
              </div>
            )}
            <div className={`image-container ${hasResponse ? 'with-response' : ''}`}>
              {generatedImage && (
                <div className="image-wrapper">
                  <img 
                    src={generatedImage} 
                    alt="Generated" 
                    className="generated-image"
                  />
                </div>
              )}
              {displayedWords.length > 0 && (
                <div className="narration-overlay">
                  <p className="single-line-narration">{displayedWords.join(' ')}</p>
                </div>
              )}
            </div>
            <div className="input-area">
              <input
                type="text"
                placeholder="Describe your journey..."
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                className="query-input"
              />
              <button
                onClick={handleSendQuery}
                disabled={isLoading}
                className={`generate-button ${isLoading ? 'disabled' : ''}`}
              >
                Generate
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LandingPage;